## DAV - challenges

#### INTRO TO R #####

### Challenge 1

## What are the values after each statement in the following?
mass <- 45            # mass?
age <- 120            # age?
mass <- mass * 2.0    # mass?
age <-age-20          # age?
mass_index <- mass/age # mass_index?


### Challenge 2

## We’ve seen that atomic vectors can be of type character, 
## numeric (or double), integer, and logical. 
## But what happens if we try to mix these types in a single vector?

## What will happen in each of these examples?
# hint(use class() to check the data type)
## Why do you think it happens?
num_char <- c(1, 2, 3, "a")
num_logical <- c(1, 2, 3, TRUE)
char_logical <- c("a", "b", "c", TRUE)
tricky <- c(1, 2, 3, "4")

## How many values in combined_logical are "TRUE" as a 
## character in the following example?
num_logical <- c(1, 2, 3, TRUE)
char_logical <- c("a", "b", "c", TRUE)
combined_logical <- c(num_logical, char_logical)

## You’ve probably noticed that objects of different types get 
## converted into a single, shared type within a vector. 
## In R, we call converting objects from one class into another class 
## coercion. 
These conversions happen according to a hierarchy, whereby some types get preferentially coerced into other types. 
Can you draw a diagram that represents the hierarchy of how these data types are coerced?


### Challenge 3

## Can you figure out why:
"four" >  "five" 


### Challenge 4 

## Using this vector of length measurements, create a new vector with the NAs removed.
lengths <- c(10, 24, NA, 18, NA, 20)

## Use the function median() to calculate the median of the lengths vector



#### STARTING WITH DATA #####

### Challenge 1

## Based on the output of str(surveys), can you answer the following questions?
# What is the class of the object surveys?
# How many rows and how many columns are in this object?
# How many species have been recorded during these surveys?


### Challenge 2

## Create a data.frame (surveys_200) containing only the observations from row 200 of the surveys dataset.

## Notice how nrow() gave you the number of rows in a data.frame?
# Use that number to pull out just that last row in the data frame.
# Compare that with what you see as the last row using tail() to make sure it's meeting expectations.
# Pull out that last row using nrow() instead of the row number.
# Create a new data frame (surveys_last) from that last row.

## Use nrow() to extract the row that is in the middle of the data frame. Store the content of this row in an object named surveys_middle.

## Combine nrow() with the - notation above to reproduce the behavior of head(surveys), keeping just the first through 6th rows of the surveys dataset.


### Challenge 3

## Rename "F" and "M" to "female" and "male" respectively.

## Now that we have renamed the factor level to "undetermined", can you recreate the
## barplot such that "undetermined" is last (after "male")?


### Challenge 4

##  There are a few mistakes in this hand-crafted `data.frame`,
##  can you spot and fix them? Don't hesitate to experiment!

animal_data <- data.frame(
  animal = c(dog, cat, sea cucumber, sea urchin),
  feel = c("furry", "squishy", "spiny"),
  weight = c(45, 8 1.1, 0.8)
)


##   Can you predict the class for each of the columns in the following example?
##   Check your guesses using `str(country_climate)`:

country_climate <- data.frame(country = c("Canada", "Panama", "South Africa", "Australia"),
                              climate = c("cold", "hot", "temperate", "hot/temperate"),
                              temperature = c(10, 30, 18, "15"),
                              northern_hemisphere = c(TRUE, TRUE, FALSE, "FALSE"),
                              has_kangaroo = c(FALSE, FALSE, FALSE, 1))

##   Are they what you expected? Why? why not?
##   What would have been different if we had added `stringsAsFactors = FALSE`
##     when we created this data frame?
##   What would you need to change to ensure that each column had the
##     accurate data type?

#### DPLYR #####

### Challenge 1
##  Using pipes, subset the data to include individuals collected
##  before 1995, and retain the columns `year`, `sex`, and `weight.`

### Challenge 2:
##  Create a new data frame from the `surveys` data that meets the following
##  criteria: contains only the `species_id` column and a column that
##  contains values that are half the `hindfoot_length` values (e.g. a
##  new column `hindfoot_half`). In this `hindfoot_half` column, there are
##  no NA values and all values are < 30.

##  Hint: think about how the commands should be ordered to produce this data frame!



















